// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebProje.Data;

#nullable disable

namespace WebProje.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231231024043_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            ConcurrencyStamp = "sdfjdsklfjs",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "user",
                            ConcurrencyStamp = "fjsahlfkjss",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "doctor",
                            ConcurrencyStamp = "jfdsklfjsad",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "admin"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "admin"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "doctor"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "doctor"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "doctor"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "doctor"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "doctor"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "doctor"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "doctor"
                        },
                        new
                        {
                            UserId = "10",
                            RoleId = "doctor"
                        },
                        new
                        {
                            UserId = "11",
                            RoleId = "doctor"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebProje.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("DoctorUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("HospitalClinicId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("DoctorUserId");

                    b.HasIndex("HospitalClinicId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("WebProje.Models.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("WebProje.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<int>("SessionTime")
                        .HasColumnType("int");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("WebProje.Models.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("WebProje.Models.HospitalClinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("HospitalId");

                    b.ToTable("HospitalClinics");
                });

            modelBuilder.Entity("WebProje.Models.HospitalSpecialities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("HospitalSpecialities");
                });

            modelBuilder.Entity("WebProje.Models.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Specialities");
                });

            modelBuilder.Entity("WebProje.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImageName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd443c98-e34c-40de-8937-0dd54c276825",
                            Email = "B201210562@sakarya.edu.tr",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "admin",
                            NormalizedUserName = "B201210562@sakarya.edu.tr",
                            PasswordHash = "AQAAAAEAACcQAAAAEHc79utDgy3KqXWzLlzU5YQ5j9cgQnEFeJ+iBjeQYq/OmiwkwZzFEbUfHX47o1L2rw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c38d1fe-450e-45ab-b568-63f6a003e0ad",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db5bea4d-a9f9-43bf-ba25-27857daaa7ef",
                            Email = "B201210566@sakarya.edu.tr",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "admin2",
                            NormalizedUserName = "B201210566@sakarya.edu.tr",
                            PasswordHash = "AQAAAAEAACcQAAAAEKh6yHY/2mNi160v6bs7JO3wRqf9jog/aeMWBSXxIhABLMMhE/P8f43fDapmpo7O9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb020d31-10c5-40dc-92a4-209b7df49f4e",
                            TwoFactorEnabled = false,
                            UserName = "admin2"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdbe311a-fdea-43a4-a891-fb0bcbad7f96",
                            Email = "d1@d.com",
                            EmailConfirmed = true,
                            ImageName = "1.jpg",
                            LockoutEnabled = false,
                            Name = "doktor1",
                            NormalizedUserName = "d1@d.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEFffaPGFxhtHgzUAHzV/mSfVcbO1hBNOBcWSf8m0iOp2frfcyXqyZ8iqacm3WlEPfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8ade393-9437-4abe-b9d1-81b8c712d878",
                            TwoFactorEnabled = false,
                            UserName = "d1@d.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdc3ce11-c0aa-4f9b-ae82-c8f39dd2d78e",
                            Email = "d2@d.com",
                            EmailConfirmed = true,
                            ImageName = "2.jpg",
                            LockoutEnabled = false,
                            Name = "doktor2",
                            NormalizedUserName = "d2@d.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLfFZOpuaIAbCEmMXauwm0m2GP1Y0me+iZL3qmJoV8TbwMgIRNvd1IzRRKhviuPUA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67ba7e4f-cfe1-4e3c-bc1e-f1b2f963857d",
                            TwoFactorEnabled = false,
                            UserName = "d2@d.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c22e2635-fd1f-40e0-a5d8-1a9b03041eda",
                            Email = "d3@d.com",
                            EmailConfirmed = true,
                            ImageName = "3.jpg",
                            LockoutEnabled = false,
                            Name = "doktor3",
                            NormalizedUserName = "d3@d.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEOLjQ3HgF69tIbjDBhytpAaU9KpNUpmTdUO+nkchRarE4QsNlzaDDKwRe6nygGZ/AQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "842d0ecd-35e2-46dd-b562-492f388be15c",
                            TwoFactorEnabled = false,
                            UserName = "d3@d.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5149d8bf-3b3d-4083-9f41-051c502fd59b",
                            Email = "d4@d.com",
                            EmailConfirmed = true,
                            ImageName = "4.jpg",
                            LockoutEnabled = false,
                            Name = "doktor4",
                            NormalizedUserName = "d4@d.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEHSkQF5LjrHZwQ5BnVmn8TBbxVhbwiXXKwvV3JbEIgtr7MKo7C+cgK3ZRh5+gfaefQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8af731c3-35d5-4eb7-a199-084efc524ff8",
                            TwoFactorEnabled = false,
                            UserName = "d4@d.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57d516dc-02ae-4888-87f3-0da594eafe8c",
                            Email = "d5@d.com",
                            EmailConfirmed = true,
                            ImageName = "5.jpg",
                            LockoutEnabled = false,
                            Name = "doktor5",
                            NormalizedUserName = "d5@d.com",
                            PasswordHash = "AQAAAAEAACcQAAAAECA8XkESIdARAeS8Q1Hb0LeXqo5zgHVfIxGwpnn9VpVt4zlAnqPufpb2RL0GwsZcew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e2b10e43-bf9d-4f6c-9943-8193e42636d3",
                            TwoFactorEnabled = false,
                            UserName = "d5@d.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16e50014-ad32-4231-8e2b-4d40cae53c71",
                            Email = "d6@d.com",
                            EmailConfirmed = true,
                            ImageName = "6.jpg",
                            LockoutEnabled = false,
                            Name = "doktor6",
                            NormalizedUserName = "d6@d.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEFTflNNtEbZ70A/rsmTYvUik3xSJRKKnryW6TVMHD6snxIC0yxs5ueqrNZpTU5fCKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "068d49be-6fdb-403f-8e54-13450076ff17",
                            TwoFactorEnabled = false,
                            UserName = "d6@d.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af819f7c-2f9b-4b36-9cd3-46e21f4263fb",
                            Email = "d7@d.com",
                            EmailConfirmed = true,
                            ImageName = "7.jpg",
                            LockoutEnabled = false,
                            Name = "doktor7",
                            NormalizedUserName = "d7@d.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEL4GK8hzs2ojAfJvlu+NqSB407HHe79VZB2BzS8ukDRH8Qf+KTeGuoId6kchi9+Mjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d68def16-b84f-487c-8de1-b95c67fd0b25",
                            TwoFactorEnabled = false,
                            UserName = "d7@d.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d15e4af-9bf7-4c1a-8eb1-50a3b7419615",
                            Email = "d8@d.com",
                            EmailConfirmed = true,
                            ImageName = "8.jpg",
                            LockoutEnabled = false,
                            Name = "doktor8",
                            NormalizedUserName = "d8@d.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELMPQ78z05Hnhx1I20sfP/awNddJCUsLLGFcyUbBTr67gWOumQoItSxZR1+wMDex2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6aacf04d-328a-4c48-a5d6-169b899b15d9",
                            TwoFactorEnabled = false,
                            UserName = "d8@d.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da52e888-b234-4830-9773-b1a0cfa87a58",
                            Email = "d9@d.com",
                            EmailConfirmed = true,
                            ImageName = "9.jpg",
                            LockoutEnabled = false,
                            Name = "doktor9",
                            NormalizedUserName = "d9@d.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEF0om07RKUh4y/tD71yhpr2qB0xNzQsOMJxhseKdl6BBt+58jCtNurs0+RhQHh9Osg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa2753c3-7dde-4ee5-adeb-d9e16e1bb5e8",
                            TwoFactorEnabled = false,
                            UserName = "d9@d.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53926e33-716b-42e4-8679-20eff2d2a19d",
                            Email = "u1@u.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "user1",
                            NormalizedUserName = "u1@u.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEJGGlgXH6iJLbxDszYkVXowBLlAaqPqwwMmDqRHtTbYFOh2Vt+el/v6Qr0BMHcf2Rg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71df79b6-312e-4f1d-b8b2-fbd7f75ab6be",
                            TwoFactorEnabled = false,
                            UserName = "u1@u.com"
                        });
                });

            modelBuilder.Entity("WebProje.Models.WorkingTimes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<string>("DaysOfWeek")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EndTime")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<int>("StartTime")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("UserId");

                    b.ToTable("WorkingTimes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebProje.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebProje.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProje.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebProje.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebProje.Models.Appointment", b =>
                {
                    b.HasOne("WebProje.Models.Doctor", null)
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId");

                    b.HasOne("WebProje.Models.User", "DoctorUser")
                        .WithMany()
                        .HasForeignKey("DoctorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProje.Models.HospitalClinic", "HospitalClinic")
                        .WithMany()
                        .HasForeignKey("HospitalClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProje.Models.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorUser");

                    b.Navigation("HospitalClinic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebProje.Models.Clinic", b =>
                {
                    b.HasOne("WebProje.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("WebProje.Models.Doctor", b =>
                {
                    b.HasOne("WebProje.Models.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProje.Models.Hospital", "Hospital")
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProje.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProje.Models.User", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Hospital");

                    b.Navigation("Speciality");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("WebProje.Models.HospitalClinic", b =>
                {
                    b.HasOne("WebProje.Models.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProje.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("WebProje.Models.HospitalSpecialities", b =>
                {
                    b.HasOne("WebProje.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProje.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("WebProje.Models.WorkingTimes", b =>
                {
                    b.HasOne("WebProje.Models.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProje.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProje.Models.User", "User")
                        .WithMany("WorkingTimes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Hospital");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebProje.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("WebProje.Models.Hospital", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("WebProje.Models.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("WorkingTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
